import pygame.time
from pygame import Surface
from pygame.sprite import Sprite, collide_rect
from pygame.image import load
MOVE_SPEED = 0.6
GRAVITY = 0.4
JUMP_POWER = 12
LIMIT_SPEED = 40
class Player(Sprite):
    def __init__(self,x,y):
        Sprite.__init__(self)
        self.image = load('ball1.png')
        self.rect = self.image.get_rect() # Снятие прямоугольника с изображения
        self.rect.x = x  # координаты этого прямоугольника
        self.rect.y = y
        self.yvel = 0
        self.xvel = 0
        self.onGround = False


    def get_die(self,die_blocks,d):
        for enemy in die_blocks:
            if collide_rect(self, enemy):
                if d == 0:
                    self.rect.x = 80
                    self.rect.y = 80
                    self.yvel = 0
                    self.xvel = 0
                if d == 1:
                    self.rect.x = 2520
                    self.rect.y = 160
                    self.yvel = 0
                    self.xvel = 0      
                if d == 2:
                    self.rect.x = 80
                    self.rect.y = 1400
                    self.yvel = 0
                    self.xvel = 0
                if d == 3:
                    self.rect.x = 2840
                    self.rect.y = 1400
                    self.yvel = 0
                    self.xvel = 0

    def update(self,left,up,right,platforms):
        if left:
            if self.xvel == 0:
                 self.xvel = -5
            self.xvel -=  MOVE_SPEED
            if abs(self.xvel) > LIMIT_SPEED:
                self.xvel +=  MOVE_SPEED 
            if self.xvel > 15: # антиинерция
                self.xvel = 15           
        if right:
            if self.xvel == 0:
                 self.xvel = 5
            self.xvel += MOVE_SPEED
            if abs(self.xvel) > LIMIT_SPEED:
                self.xvel -=  MOVE_SPEED 
            if self.xvel < -15: # антиинерция
                self.xvel = -15   
        if not(left or right):
            self.xvel = 0
        if up:
            if self.onGround:
                self.yvel = -JUMP_POWER
        if not self.onGround:
            self.yvel += GRAVITY    
        self.onGround = False
        self.rect.x += self.xvel
        self.collide(self.xvel,0,platforms)
        self.rect.y += self.yvel
        self.collide(0,self.yvel,platforms)


    def collide(self,xvel,yvel,platforms):
        for pl in platforms:
            if collide_rect(self,pl):
                if xvel > 0:
                    self.rect.right = pl.rect.left
                if xvel < 0:
                    self.rect.left = pl.rect.right
                if yvel > 0:
                    self.rect.bottom = pl.rect.top
                    self.onGround = True
                    self.yvel = 0
                if yvel < 0:
                    self.rect.top = pl.rect.bottom
                    self.yvel = 0

    def autsave(self, d, autsave_blocks, sprite_group):  
        for i in range(len(autsave_blocks)):
            if collide_rect(self,autsave_blocks[i]):
                sprite_group.remove(autsave_blocks[i])
                return (i + 1)
        return d

    def end(self, end_level, i, d, autsave_blocks, sprite_group):
        if collide_rect(self,end_level):
            i += 1
            d = 0
            for aut in autsave_blocks:
                if aut not in sprite_group:
                    sprite_group.add(aut)
            self.rect.x = 80
            self.rect.y = 80
            self.yvel = 0
            self.xvel = 0
            tmp = 'Super Mario. Score = ' + str(i) 
            pygame.display.set_caption(tmp)
        return [i,d]    
            
